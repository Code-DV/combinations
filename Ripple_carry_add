/////////////////////////Ripple_carry_add/////////////////////////////////////

module full_adder(input a,b,cin,output sum,cout);
   assign sum = a^b^cin;
	assign cout= (a&b) | (b&cin) | (cin&a);
	
endmodule

module RCA_4bit(
    input  [3:0] a, b,
    input        cin,
    output [3:0] sum,
    output       cout
);
    wire c1, c2, c3;

    full_adder F1(.a(a[0]), .b(b[0]), .cin(cin),  .sum(sum[0]), .cout(c1));
    full_adder F2(.a(a[1]), .b(b[1]), .cin(c1),   .sum(sum[1]), .cout(c2));
	 full_adder F3(.a(a[2]), .b(b[2]), .cin(c2),   .sum(sum[2]), .cout(c3));
	 full_adder F4(.a(a[3]), .b(b[3]), .cin(c3),   .sum(sum[0]), .cout(cout));

endmodule

/////////////////////////////////////TB/////////////////////////////
module tb_RCA;

	// Inputs
	reg [3:0] a;
	reg [3:0] b;
	reg cin;

	// Outputs
	wire [3:0] sum;
	wire cout;
   integer i,j;
	// Instantiate the Unit Under Test (UUT)
	RCA_4bit uut (
		.a(a), 
		.b(b), 
		.cin(cin), 
		.sum(sum), 
		.cout(cout)
	);

	  initial begin
    // Loop through all input combinations
    for (i = 0; i < 16; i = i + 1) begin
      for (j = 0; j < 16; j = j + 1) begin
        a = i;
        b = j;

        cin = 0; #5;
        cin = 1; #5;
      end
    end
    $finish;
  end
	 
    initial begin
    $monitor("Time=%0t | a=%b (%0d) b=%b (%0d) cin=%b | sum=%b (%0d) cout=%b",
             $time, a, a, b, b, cin, sum, sum, cout);
   end
endmodule
